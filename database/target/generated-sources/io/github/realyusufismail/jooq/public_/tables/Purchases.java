/*
 * This file is generated by jOOQ.
 */
package io.github.realyusufismail.jooq.public_.tables;


import io.github.realyusufismail.jooq.public_.Keys;
import io.github.realyusufismail.jooq.public_.Public;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchases extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.PURCHASES</code>
     */
    public static final Purchases PURCHASES = new Purchases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.PURCHASES.USER_ID</code>.
     */
    public final TableField<Record, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.PURCHASES.COURSE_ID</code>.
     */
    public final TableField<Record, Integer> COURSE_ID = createField(DSL.name("COURSE_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.PURCHASES.PURCHASES_AT</code>.
     */
    public final TableField<Record, LocalDateTime> PURCHASES_AT = createField(DSL.name("PURCHASES_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private Purchases(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Purchases(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.PURCHASES</code> table reference
     */
    public Purchases(String alias) {
        this(DSL.name(alias), PURCHASES);
    }

    /**
     * Create an aliased <code>PUBLIC.PURCHASES</code> table reference
     */
    public Purchases(Name alias) {
        this(alias, PURCHASES);
    }

    /**
     * Create a <code>PUBLIC.PURCHASES</code> table reference
     */
    public Purchases() {
        this(DSL.name("PURCHASES"), null);
    }

    public <O extends Record> Purchases(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PURCHASES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_3, Keys.CONSTRAINT_3B);
    }

    private transient Users _users;
    private transient Courses _courses;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CONSTRAINT_3);

        return _users;
    }

    public Courses courses() {
        if (_courses == null)
            _courses = new Courses(this, Keys.CONSTRAINT_3B);

        return _courses;
    }

    @Override
    public Purchases as(String alias) {
        return new Purchases(DSL.name(alias), this);
    }

    @Override
    public Purchases as(Name alias) {
        return new Purchases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchases rename(String name) {
        return new Purchases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchases rename(Name name) {
        return new Purchases(name, null);
    }
}
